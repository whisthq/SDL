# workflows/build-and-publish-sdl.yml
#
# Build & Publish Whist SDL
# Build and publish the Whist version of SDL by uploading the compiled libs to AWS S3.

name: "Build & Publish Whist SDL"

on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - README.md
  push:
    branches:
      - main
    paths-ignore:
      - README.md
  workflow_dispatch:

# This guarantees that if you push many commits to the same PR, only the latest
# commit will get run (others get cancelled)
concurrency:
  group: build-and-publish-sdl-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build-and-publish-whist-sdl:
    name: ${{ matrix.config.name }} (${{ matrix.options.name }})
    runs-on: ${{ matrix.config.os }}

    strategy:
      matrix:
        config:
          - name: "Windows"
            os: windows-2019 # Same OS as Windows 10
          - name: "macOS (x64)"
            os: macos-10.15 # Xcode and Homebrew come preinstalled
          - name: "macOS (arm64)"
            os: macos-11 # Xcode and Homebrew come preinstalled
          - name: "Linux Ubuntu"
            os: ubuntu-20.04
        options:
          - name: "Default"
            suffix: ""
            cmake-flags: ""
          - name: "Position-Independent Code"
            suffix: "-pic"
            cmake-flags: "-D SDL_STATIC_PIC=ON"

    env:
      binary-location: build
      windows-tar-name: whist-windows-sdl2-static-lib${{ matrix.options.suffix }}.tar.gz
      macos-x64-tar-name: whist-macos-x64-sdl2-static-lib${{ matrix.options.suffix }}.tar.gz
      macos-arm64-tar-name: whist-macos-arm64-sdl2-static-lib${{ matrix.options.suffix }}.tar.gz
      linux-tar-name: whist-linux-sdl2-static-lib${{ matrix.options.suffix }}.tar.gz
      s3-bucket-region: us-east-1
      s3-bucket-uri: s3://fractal-protocol-shared-libs

    steps:
      ################################# CONFIG STEPS START ##############################

      - name: Checkout Git Repository
        uses: actions/checkout@v3

      - name: Configure AWS S3 CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_GITHUB_ACTIONS_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_GITHUB_ACTIONS_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.s3-bucket-region }}

      ###################################################################################
      ################################ WINDOWS STEPS START ##############################

      - name: On Windows, Set up Visual Studio Developer Command Prompt (for nmake)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Build Whist SDL on Windows
        if: runner.os == 'Windows'
        shell: cmd
        run: |
          REM create build output folder
          mkdir ${{ env.binary-location }}

          REM configure Cmake
          cmake ^
            -S . ^
            -B build ^
            -D HAVE_LIBC=ON ^
            -D DIRECTX=OFF ^
            -D CMAKE_BUILD_TYPE=Release ^
            ${{ matrix.options.cmake-flags }} ^
            -G "NMake Makefiles"

          REM build SDL
          cd ${{ env.binary-location }} && nmake SDL2-static

      ###################################################################################
      ################################# MACOS STEPS START ###############################

      - name: Build Whist SDL on macOS
        if: runner.os == 'macOS'
        run: |
          # create build output folder
          mkdir ${{ env.binary-location }}

          if [[ "${{ matrix.config.name }}" == "macOS (x64)" ]]; then
            # configure Cmake for native compilation on x64 systems
            cmake \
              -S . \
              -B build \
              -D CMAKE_BUILD_TYPE=Release \
              ${{ matrix.options.cmake-flags }}
          elif [[ "${{ matrix.config.name }}" == "macOS (arm64)" ]]; then
            # configure Cmake for cross-compilation to arm64 from x64 systems
            cmake \
              -S . \
              -B build \
              -D CMAKE_OSX_ARCHITECTURES=arm64 \
              -D CMAKE_BUILD_TYPE=Release \
              ${{ matrix.options.cmake-flags }}
          else
            echo "Unsupported compilation attempt on macOS"
            exit
          fi

          # build SDL
          cd ${{ env.binary-location }} && make -j SDL2-static

      ###################################################################################
      ############################# LINUX UBUNTU STEPS START ############################

      - name: On Linux, Install SDL Dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install libasound2-dev xorg-dev

      - name: Build Whist SDL on Linux Ubuntu
        if: runner.os == 'Linux'
        run: |
          # create build output folder
          mkdir ${{ env.binary-location }}

          # configure Cmake
          cmake \
            -S . \
            -B build \
            -D CMAKE_BUILD_TYPE=Release \
            ${{ matrix.options.cmake-flags }}

          # build SDL
          cd ${{ env.binary-location }}
          make -j SDL2-static

      ###################################################################################
      ################################# PUBLISH STEPS START #############################

      # Only publish to AWS S3 on Push/Workflow_dispatch events (code merged into `main`)
      - name: Tar libSDL and Upload to AWS S3 (Only on Push Events)
        if: ${{ github.event_name == 'push' || github.event_name == 'workflow_dispatch' }}
        shell: bash --noprofile --norc -eo pipefail {0}
        working-directory: ${{ env.binary-location }}
        run: |
          # copy headers, but do not overwrite the generated SDL_config.h (-n)
          mv -n ../include/*.h include
          if [ "$RUNNER_OS" == "Linux" ]; then
            tar -zcvf ${{ env.linux-tar-name }} libSDL2.a include/*.h
            aws s3 cp ${{ env.linux-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.linux-tar-name }}
          elif [ "$RUNNER_OS" == "Windows" ]; then
            tar -zcvf ${{ env.windows-tar-name }} SDL2-static.lib include/*.h
            aws s3 cp ${{ env.windows-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.windows-tar-name }}
          else
            if [[ "${{ matrix.config.name }}" == "macOS (x64)" ]]; then
              tar -zcvf ${{ env.macos-x64-tar-name }} libSDL2.a include/*.h
              aws s3 cp ${{ env.macos-x64-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.macos-x64-tar-name }}
            elif [[ "${{ matrix.config.name }}" == "macOS (arm64)" ]]; then
              # copy headers, but do not overwrite the generated SDL_config.h (-n)
              mv -n ../include/*.h include
              tar -zcvf ${{ env.macos-arm64-tar-name }} libSDL2.a include/*.h
              aws s3 cp ${{ env.macos-arm64-tar-name }} ${{ env.s3-bucket-uri }}/${{ env.macos-arm64-tar-name }}
            else
              echo "Tried to tar and upload libSDL to AWS S3 for an unsupported OS"
              exit             
            fi
          fi

      ###################################################################################

      - name: Checkout whisthq/whist Git Repository
        if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && failure() }}
        uses: actions/checkout@v3
        with:
          repository: whisthq/whist
          ref: "dev"
          token: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}

      - name: Setup Python-based Notifications
        if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && failure() }}
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Notify Slack on Workflow Error (Only on Push/Workflow_dispatch Events)
        if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && failure() }}
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          BODY = f"@releases :rotating_light: Failed to deploy Whist `SDL ${{ matrix.config.name }}` Static Library to AWS S3, investigate immediately :rotating_light: (<https://github.com/whisthq/SDL/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, body=BODY)

  #######################################################################################
  #######################################################################################

  # Notify us in Slack if all jobs from this workflow succeed
  notify-slack:
    name: Notify Slack
    runs-on: ubuntu-20.04
    needs: [build-and-publish-whist-sdl]
    if: ${{ (github.event_name == 'push' || github.event_name == 'workflow_dispatch') && success() }}
    steps:
      - name: Checkout whisthq/whist Git Repository
        uses: actions/checkout@v3
        with:
          repository: whisthq/whist
          ref: "dev"
          token: ${{ secrets.GHA_PERSONAL_ACCESS_TOKEN }}

      - name: Setup Python-based Notifications
        working-directory: .github/workflows/helpers
        run: ./notifications/setup_notifications.sh

      - name: Notify Slack on Workflow Success
        shell: python3 {0}
        run: |
          from notifications.slack_bot import slack_post
          SLACK_WEBHOOK = "${{ secrets.SLACK_HOOKS_ENDPOINT_PROD }}"
          TITLE = ":sdl: Whist SDL2 Static Libraries Deployed :sdl:"
          BODY = f"Whist `SDL` Static Libraries deployed to Production via upload to AWS S3 (<https://github.com/whisthq/SDL/actions/runs/${{ github.run_id }} | see logs>)"
          slack_post(slack_webhook=SLACK_WEBHOOK, title=TITLE, body=BODY)
